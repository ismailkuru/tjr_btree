module type Blk_types = sig type blk type blk_id = int end
module Constants_type :
  sig
    type t =
      Tjr_btree.Constants.Constants_type.t = {
      min_leaf_size : int;
      max_leaf_size : int;
      min_node_keys : int;
      max_node_keys : int;
    }
    val to_yojson : t -> Yojson.Safe.json
    val of_yojson :
      Yojson.Safe.json -> t Ppx_deriving_yojson_runtime.error_or
  end
module Frame_type :
  sig type ('k, 'v, 'r) frame = ('k, 'v, 'r) Tjr_btree.Frame.dnode end
module Ls_state :
  sig
    type ('k, 'v, 'r) ls_state =
        ('k, 'v, 'r) Tjr_btree.Isa_export.Leaf_stream.ls_state
  end
module Params :
  sig
    val cmp : < cmp : 'k -> 'k -> int; .. > -> 'k -> 'k -> int
    val constants :
      < constants : Tjr_btree.Constants.t; .. > -> Tjr_btree.Constants.t
    val r2t :
      < r2t : ('k, 'v, 'r, 't) Tjr_btree.R2t.r2t; .. > ->
      ('k, 'v, 'r, 't) Tjr_btree.R2t.r2t
    val k2j : < k2j : 'k -> Yojson.Safe.json; .. > -> 'k -> Yojson.Safe.json
    val v2j : < v2j : 'v -> Yojson.Safe.json; .. > -> 'v -> Yojson.Safe.json
    val r2j : < r2j : 'r -> Yojson.Safe.json; .. > -> 'r -> Yojson.Safe.json
    val dbg_ps : < dbg_ps : 'a; .. > -> 'a
    val blk_sz : < blk_sz : int; .. > -> int
    val page_size : < blk_sz : int; .. > -> int
    val page_to_frame :
      < page_to_frame : Tjr_btree.Block.blk ->
                        ('k, 'v, 'r) Tjr_btree.Frame.frame;
        .. > ->
      Tjr_btree.Block.blk -> ('k, 'v, 'r) Tjr_btree.Frame.frame
    val frame_to_page :
      < frame_to_page : int ->
                        ('k, 'v, 'r) Tjr_btree.Frame.frame ->
                        Tjr_btree.Block.blk;
        .. > ->
      int -> ('k, 'v, 'r) Tjr_btree.Frame.frame -> Tjr_btree.Block.blk
    val page_ref_ops : < page_ref_ops : 'a; .. > -> 'a
    val store_ops : < store_ops : 'a; .. > -> 'a
    val fd_ops : < fd_ops : 'a; .. > -> 'a
    val free_ops : < free_ops : 'a; .. > -> 'a
  end
module R2f :
  sig
    type ('k, 'v, 'r, 't) r2f =
        't -> 'r -> ('k, 'v, 'r) Tjr_btree.Frame.frame option
    val mk_r2f :
      store_read:('r ->
                  't -> 'a * (('k, 'v, 'r) Tjr_btree.Frame.frame, 'b) result) ->
      ('k, 'v, 'r, 't) r2f
  end
module R2t :
  sig
    type ('k, 'v, 'r, 't) r2t =
        't -> 'r -> ('k, 'v) Tjr_btree.Tree.tree option
    val int_to_nat : int -> Tjr_btree.Isa_export.Arith.nat
    val mk_r2t :
      ('a -> 'b -> ('c, 'd, 'b) Tjr_btree.Isa_export.Disk_node.dnode option) ->
      'a -> 'b -> ('c, 'd) Tjr_btree.Isa_export.Tree.tree option
    val store_read_to_r2t :
      ('a -> 'b -> 'c * (('d, 'e, 'a) Tjr_btree.Frame.frame, 'f) result) ->
      'b -> 'a -> ('d, 'e) Tjr_btree.Isa_export.Tree.tree option
  end
module Rstk :
  sig
    type ('k, 'r) rstk = ('k, 'r) Tjr_btree.Isa_export.Tree_stack.rstack
  end
module Tree_type :
  sig type ('a, 'b) tree = ('a, 'b) Tjr_btree.Isa_export.Tree.tree end
module Disk_ops :
  sig
    val wf_disk_ops :
      blk_sz:Tjr_btree.Block.blk_sz ->
      read:(Tjr_btree.Block.blk_id ->
            (Tjr_btree.Block.blk, 't) Tjr_btree.Base_types.m) ->
      write:(Tjr_btree.Block.blk_id ->
             Tjr_btree.Block.blk -> (unit, 't) Tjr_btree.Base_types.m) ->
      bool
    val mk_disk_ops :
      blk_sz:'a -> read:'b -> write:'c -> [> `Disk_ops of 'a * 'b * 'c ]
    val dest_disk_ops :
      [< `Disk_ops of
           Tjr_btree.Block.blk_sz *
           (Tjr_btree.Block.blk_id ->
            (Tjr_btree.Block.blk, 'a) Tjr_btree.Base_types.m) *
           (Tjr_btree.Block.blk_id ->
            Tjr_btree.Block.blk -> (unit, 'a) Tjr_btree.Base_types.m) ] ->
      (blk_sz:Tjr_btree.Block.blk_sz ->
       read:(Tjr_btree.Block.blk_id ->
             (Tjr_btree.Block.blk, 'a) Tjr_btree.Base_types.m) ->
       write:(Tjr_btree.Block.blk_id ->
              Tjr_btree.Block.blk -> (unit, 'a) Tjr_btree.Base_types.m) ->
       'b) ->
      'b
    val wf_imperative_disk_ops :
      blk_sz:Tjr_btree.Block.blk_sz ->
      read:(Tjr_btree.Block.blk_id -> Tjr_btree.Block.blk) ->
      write:(Tjr_btree.Block.blk_id -> Tjr_btree.Block.blk -> unit) -> bool
    val disk_ops_to_imperative :
      blk_sz:Tjr_btree.Block.blk_sz ->
      read:(Tjr_btree.Block.blk_id ->
            (Tjr_btree.Block.blk, 'a) Tjr_btree.Base_types.m) ->
      write:(Tjr_btree.Block.blk_id ->
             Tjr_btree.Block.blk -> (unit, 'a) Tjr_btree.Base_types.m) ->
      _ref:'a ref ->
      [> `Imperative_disk_ops of
           Tjr_btree.Block.blk_sz *
           (Tjr_btree.Block.blk_id -> Tjr_btree.Block.blk) *
           (Tjr_btree.Block.blk_id -> Tjr_btree.Block.blk -> unit) ]
  end
module Leaf_stream_ops :
  sig
    type ('k, 'v, 'r) lss =
      ('k, 'v, 'r) Tjr_btree.Leaf_stream_ops.lss = {
      kvs : ('k * 'v) list;
      ls : ('k, 'v, 'r) Tjr_btree.Ls_state.ls_state;
    }
    val wf_ls_ops :
      mk_leaf_stream:(unit -> (('k, 'v, 'r) lss, 't) Monad.m) ->
      ls_step:(('k, 'v, 'r) lss -> (('k, 'v, 'r) lss option, 't) Monad.m) ->
      ls_kvs:(('k, 'v, 'r) lss -> ('k * 'v) list) -> bool
    val mk_ls_ops :
      mk_leaf_stream:(unit -> (('a, 'b, 'c) lss, 'd) Monad.m) ->
      ls_step:(('a, 'b, 'c) lss -> (('a, 'b, 'c) lss option, 'd) Monad.m) ->
      ls_kvs:(('a, 'b, 'c) lss -> ('a * 'b) list) ->
      [> `Ls_ops of
           (unit -> (('a, 'b, 'c) lss, 'd) Monad.m) *
           (('a, 'b, 'c) lss -> (('a, 'b, 'c) lss option, 'd) Monad.m) *
           (('a, 'b, 'c) lss -> ('a * 'b) list) ]
    val dest_ls_ops :
      [< `Ls_ops of
           (unit -> (('a, 'b, 'c) lss, 'd) Monad.m) *
           (('a, 'b, 'c) lss -> (('a, 'b, 'c) lss option, 'd) Monad.m) *
           (('a, 'b, 'c) lss -> ('a * 'b) list) ] ->
      (mk_leaf_stream:(unit -> (('a, 'b, 'c) lss, 'd) Monad.m) ->
       ls_step:(('a, 'b, 'c) lss -> (('a, 'b, 'c) lss option, 'd) Monad.m) ->
       ls_kvs:(('a, 'b, 'c) lss -> ('a * 'b) list) -> 'e) ->
      'e
  end
module Map_ops :
  sig
    val wf_map_ops :
      find:('k -> ('v option, 't) Monad.m) ->
      insert:('k -> 'v -> (unit, 't) Monad.m) ->
      delete:('k -> (unit, 't) Monad.m) ->
      insert_many:('k -> 'v -> ('k * 'v) list -> (('k * 'v) list, 't) Monad.m) ->
      bool
    val mk_map_ops :
      find:('a -> ('b option, 'c) Monad.m) ->
      insert:('a -> 'b -> (unit, 'c) Monad.m) ->
      delete:('a -> (unit, 'c) Monad.m) ->
      insert_many:('a -> 'b -> ('a * 'b) list -> (('a * 'b) list, 'c) Monad.m) ->
      [> `Map_ops of
           ('a -> ('b option, 'c) Monad.m) *
           ('a -> 'b -> (unit, 'c) Monad.m) * ('a -> (unit, 'c) Monad.m) *
           ('a -> 'b -> ('a * 'b) list -> (('a * 'b) list, 'c) Monad.m) ]
    val dest_map_ops :
      [< `Map_ops of
           ('a -> ('b option, 'c) Monad.m) *
           ('a -> 'b -> (unit, 'c) Monad.m) * ('a -> (unit, 'c) Monad.m) *
           ('a -> 'b -> ('a * 'b) list -> (('a * 'b) list, 'c) Monad.m) ] ->
      (find:('a -> ('b option, 'c) Monad.m) ->
       insert:('a -> 'b -> (unit, 'c) Monad.m) ->
       delete:('a -> (unit, 'c) Monad.m) ->
       insert_many:('a ->
                    'b -> ('a * 'b) list -> (('a * 'b) list, 'c) Monad.m) ->
       'd) ->
      'd
    val insert_all :
      ('a -> 'b -> ('a * 'b) list -> (('a * 'b) list, 'c) Monad.m) ->
      'a -> 'b -> ('a * 'b) list -> (unit, 'c) Monad.m
    val wf_imperative_map_ops :
      find:('k -> 'v option) ->
      insert:('k -> 'v -> unit) -> delete:('k -> unit) -> bool
    val map_ops_to_imperative :
      [< `Map_ops of
           ('a -> ('b option, 'c) Monad.m) *
           ('a -> 'b -> (unit, 'c) Monad.m) * ('a -> (unit, 'c) Monad.m) *
           ('a -> 'b -> ('a * 'b) list -> (('a * 'b) list, 'c) Monad.m) ] ->
      s_ref:'c ref ->
      [> `Imperative_map_ops of
           ('a -> 'b option) * ('a -> 'b -> unit) * ('a -> unit) ]
    val dest_imperative_map_ops :
      [< `Imperative_map_ops of
           ('a -> 'b option) * ('a -> 'b -> unit) * ('a -> unit) ] ->
      (find:('a -> 'b option) ->
       insert:('a -> 'b -> unit) -> delete:('a -> unit) -> 'c) ->
      'c
  end
module Pre_map_ops :
  sig
    type ('k, 'v, 'r, 't) pre_map_ops =
      ('k, 'v, 'r, 't) Tjr_btree.Pre_map_ops.pre_map_ops = {
      find_leaf :
        'k ->
        'r ->
        ('r * ('k * 'v) list * ('k, 'r) Tjr_btree.Rstk.rstk, 't)
        Tjr_btree.Base_types.m;
      find : 'k -> 'r -> ('r * ('k * 'v) list, 't) Tjr_btree.Base_types.m;
      insert : 'k -> 'v -> 'r -> ('r, 't) Tjr_btree.Base_types.m;
      insert_many :
        'k ->
        'v ->
        ('k * 'v) list ->
        'r -> ('r * ('k * 'v) list, 't) Tjr_btree.Base_types.m;
      delete : 'k -> 'r -> ('r, 't) Tjr_btree.Base_types.m;
    }
    val mk_pre_map_ops :
      find_leaf:('a ->
                 'b ->
                 ('b * ('a * 'c) list * ('a, 'b) Tjr_btree.Rstk.rstk, 'd)
                 Tjr_btree.Base_types.m) ->
      find:('a -> 'b -> ('b * ('a * 'c) list, 'd) Tjr_btree.Base_types.m) ->
      insert:('a -> 'c -> 'b -> ('b, 'd) Tjr_btree.Base_types.m) ->
      insert_many:('a ->
                   'c ->
                   ('a * 'c) list ->
                   'b -> ('b * ('a * 'c) list, 'd) Tjr_btree.Base_types.m) ->
      delete:('a -> 'b -> ('b, 'd) Tjr_btree.Base_types.m) ->
      ('a, 'c, 'b, 'd) pre_map_ops
    val dest_pre_map_ops :
      ('a, 'b, 'c, 'd) pre_map_ops ->
      (find_leaf:('a ->
                  'c ->
                  ('c * ('a * 'b) list * ('a, 'c) Tjr_btree.Rstk.rstk, 'd)
                  Tjr_btree.Base_types.m) ->
       find:('a -> 'c -> ('c * ('a * 'b) list, 'd) Tjr_btree.Base_types.m) ->
       insert:('a -> 'b -> 'c -> ('c, 'd) Tjr_btree.Base_types.m) ->
       insert_many:('a ->
                    'b ->
                    ('a * 'b) list ->
                    'c -> ('c * ('a * 'b) list, 'd) Tjr_btree.Base_types.m) ->
       delete:('a -> 'c -> ('c, 'd) Tjr_btree.Base_types.m) -> 'e) ->
      'e
  end
module Store_ops :
  sig
    type ('k, 'v, 'r, 't) store_ops =
      ('k, 'v, 'r, 't) Tjr_btree.Store_ops.store_ops = {
      store_free : 'r list -> (unit, 't) Monad.m;
      store_read : 'r -> (('k, 'v, 'r) Tjr_btree.Frame.frame, 't) Monad.m;
      store_alloc : ('k, 'v, 'r) Tjr_btree.Frame.frame -> ('r, 't) Monad.m;
    }
    val mk_store_ops :
      store_free:('a list -> (unit, 'b) Monad.m) ->
      store_read:('a -> (('c, 'd, 'a) Tjr_btree.Frame.frame, 'b) Monad.m) ->
      store_alloc:(('c, 'd, 'a) Tjr_btree.Frame.frame -> ('a, 'b) Monad.m) ->
      ('c, 'd, 'a, 'b) store_ops
    val dest_store_ops :
      ('a, 'b, 'c, 'd) store_ops ->
      (store_free:('c list -> (unit, 'd) Monad.m) ->
       store_read:('c -> (('a, 'b, 'c) Tjr_btree.Frame.frame, 'd) Monad.m) ->
       store_alloc:(('a, 'b, 'c) Tjr_btree.Frame.frame -> ('c, 'd) Monad.m) ->
       'e) ->
      'e
    val x_store_ops :
      ('k, 'v, 'r, 't) store_ops ->
      ('k, 'v, 'r, 't, unit) Tjr_btree.Isa_export.Params.store_ops_ext
    val x_ps1 :
      constants:Tjr_btree.Constants.t ->
      cmp:('k -> 'k -> int) ->
      store_ops:('k, 'v, 'r, 't) store_ops ->
      ('k, 'v, 'r, 't) Tjr_btree.Isa_export.Params.ps1
  end
module Small_step_types :
  sig
    type ('k, 'v, 'r) find_state =
        ('k, 'v, 'r) Tjr_btree.Isa_export.Find.find_state
    type ('k, 'v, 'r) insert_state =
        ('k, 'v, 'r) Tjr_btree.Isa_export.Insert.insert_state
    type ('k, 'v, 'r) im_state =
        ('k, 'v, 'r) Tjr_btree.Isa_export.Insert_many.ist
    type ('k, 'v, 'r) delete_state =
        ('k, 'v, 'r) Tjr_btree.Isa_export.Delete2.delete_state
  end
module Store_to_map :
  sig
    type 't page_ref_ops =
        (Tjr_btree.Page_ref_int.page_ref, 't) Tjr_btree.Base_types.mref
    val make_map_ops' :
      ('a, 'b, 'c, 'd) Tjr_btree.Pre_map_ops.pre_map_ops ->
      ('c, 'd) Monad.mref ->
      [> `Map_ops of
           ('a -> ('b option, 'd) Monad.m) *
           ('a -> 'b -> (unit, 'd) Monad.m) * ('a -> (unit, 'd) Monad.m) *
           ('a -> 'b -> ('a * 'b) list -> (('a * 'b) list, 'd) Monad.m) ]
    val store_ops_to_map_ops :
      ps:< cmp : 'a -> 'a -> int; constants : Tjr_btree.Constants.t; .. > ->
      page_ref_ops:('b, 'c) Monad.mref ->
      store_ops:('a, 'd, 'b, 'c) Tjr_btree.Store_ops.store_ops ->
      [ `Map_ops of
          ('a -> ('d option, 'c) Monad.m) *
          ('a -> 'd -> (unit, 'c) Monad.m) * ('a -> (unit, 'c) Monad.m) *
          ('a -> 'd -> ('a * 'd) list -> (('a * 'd) list, 'c) Monad.m) ]
    val ils_mk :
      ps:< cmp : 'a -> 'a -> int; constants : Tjr_btree.Constants.t; .. > ->
      store_ops:('a, 'b, 'c, 'd) Tjr_btree.Store_ops.store_ops ->
      (mk_leaf_stream:('c ->
                       (('a, 'b, 'c) Tjr_btree.Leaf_stream_ops.lss, 'd)
                       Monad.m) ->
       ls_kvs:(('a, 'b, 'e) Tjr_btree.Leaf_stream_ops.lss -> ('a * 'b) list) ->
       ls_step:(('a, 'b, 'c) Tjr_btree.Leaf_stream_ops.lss ->
                (('a, 'b, 'c) Tjr_btree.Leaf_stream_ops.lss option, 'd)
                Monad.m) ->
       'f) ->
      'f
    val make_ls_ops :
      ps:< cmp : 'a -> 'a -> int; constants : Tjr_btree.Constants.t; .. > ->
      store_ops:('a, 'b, 'c, 'd) Tjr_btree.Store_ops.store_ops ->
      page_ref_ops:('c, 'd) Monad.mref ->
      [ `Ls_ops of
          (unit -> (('a, 'b, 'c) Tjr_btree.Leaf_stream_ops.lss, 'd) Monad.m) *
          (('a, 'b, 'c) Tjr_btree.Leaf_stream_ops.lss ->
           (('a, 'b, 'c) Tjr_btree.Leaf_stream_ops.lss option, 'd) Monad.m) *
          (('a, 'b, 'c) Tjr_btree.Leaf_stream_ops.lss -> ('a * 'b) list) ]
  end
module Disk_on_fd :
  sig
    type fd = Unix.file_descr
    type 't fd_ops = (fd, 't) Monad.mref
    val read :
      fd:Unix.file_descr ->
      blk_sz:Tjr_btree.Block.blk_sz -> blk_id:int -> Tjr_btree.Block.blk
    val write :
      fd:Unix.file_descr ->
      blk_sz:int -> blk_id:int -> blk:Tjr_btree.Block.blk -> unit
    val safely_ : string -> ('a, 't) Monad.m -> ('a, 't) Monad.m
    val make_disk :
      blk_sz:Tjr_btree.Block.blk_sz ->
      fd_ops:(Unix.file_descr, 't) Monad.mref ->
      [> `Disk_ops of
           Tjr_btree.Block.blk_sz *
           (Tjr_btree.Block.blk_id -> (Tjr_btree.Block.blk, 't) Monad.m) *
           (Tjr_btree.Block.blk_id ->
            Tjr_btree.Block.blk -> (unit, 't) Monad.m) ]
  end
module Disk_to_store :
  sig
    type 't free_ops = (int, 't) Monad.mref
    val disk_to_store :
      ps:< blk_sz : int;
           frame_to_page : int ->
                           ('k, 'v, Tjr_btree.Block.blk_id)
                           Tjr_btree.Frame.frame -> Tjr_btree.Block.blk;
           page_to_frame : Tjr_btree.Block.blk ->
                           ('k, 'v, Tjr_btree.Page_ref_int.page_ref)
                           Tjr_btree.Frame.frame;
           .. > ->
      disk_ops:[< `Disk_ops of
                    Tjr_btree.Block.blk_sz *
                    (Tjr_btree.Block.blk_id ->
                     (Tjr_btree.Block.blk, 't) Tjr_btree.Base_types.m) *
                    (Tjr_btree.Block.blk_id ->
                     Tjr_btree.Block.blk -> (unit, 't) Tjr_btree.Base_types.m) ] ->
      free_ops:(Tjr_btree.Block.blk_id, 't) Monad.mref ->
      ('k, 'v, Tjr_btree.Block.blk_id, 't) Tjr_btree.Store_ops.store_ops
  end
module Mem_store :
  sig
    type ('k, 'v) mem =
      ('k, 'v) Tjr_btree.Mem_store.mem = {
      free : int;
      map : ('k, 'v) Tjr_btree.Page_ref_int.frame Map_int.t;
    }
    type ('k, 'v, 't) mem_ops = (('k, 'v) mem, 't) Monad.mref
    val mk_store_ops :
      ('k, 'v, 't) mem_ops ->
      ('k, 'v, Map_int.key, 't) Tjr_btree.Store_ops.store_ops
    val mk_r2f :
      ('a -> ('k, 'v) mem) ->
      'a -> Map_int.key -> ('k, 'v) Tjr_btree.Page_ref_int.frame option
    val mem_ops : < mem_ops : 'a; .. > -> 'a
  end
module Cache :
  sig
    type time = int
    type dirty = bool
    module Queue = Map_int
    module Pmap = Tjr_btree.Cache.Pmap
    type ('k, 'v) cache_state =
      ('k, 'v) Tjr_btree.Cache.cache_state = {
      max_size : int;
      evict_count : int;
      current : time;
      map : ('k, 'v option * time * dirty) Pmap.t;
      queue : 'k Queue.t;
    }
    type ('k, 'v, 't) cache_ops =
        (('k, 'v) cache_state, 't) Tjr_btree.Base_types.mref
    val normalize : ('a, 'b) cache_state -> ('a, 'b) cache_state
    val then_ : (unit -> int) -> int -> int
    val compare : ('a, 'b) cache_state -> ('a, 'b) cache_state -> int
    val mk_initial_cache : ('k -> 'k -> int) -> ('k, 'a) cache_state
    val wf : ('a, 'b) cache_state -> unit
    exception E_
    val sync_evictees :
      [< `Map_ops of
           ('a -> ('b option, 'c) Monad.m) *
           ('a -> 'b -> (unit, 'c) Monad.m) * ('a -> (unit, 'c) Monad.m) *
           ('a -> 'b -> ('a * 'b) list -> (('a * 'b) list, 'c) Monad.m) ] ->
      ('a * ('b option * 'd * bool)) list -> (unit, 'c) Monad.m
    val mark_all_clean :
      (('a, 'b * 'c * bool) Pmap.t, 'd) Monad.mref -> (unit, 'd) Monad.m
    val sync :
      [< `Map_ops of
           ('a -> ('b option, 'c) Monad.m) *
           ('a -> 'b -> (unit, 'c) Monad.m) * ('a -> (unit, 'c) Monad.m) *
           ('a -> 'b -> ('a * 'b) list -> (('a * 'b) list, 'c) Monad.m) ] ->
      (('a, 'b option * 'd * bool) Pmap.t, 'c) Monad.mref ->
      (unit, 'c) Monad.m
    val make_cached_map :
      map_ops:[< `Map_ops of
                   ('a -> ('b option, 'c) Monad.m) *
                   ('a -> 'b -> (unit, 'c) Monad.m) *
                   ('a -> (unit, 'c) Monad.m) *
                   ('a ->
                    'b -> ('a * 'b) list -> (('a * 'b) list, 'c) Monad.m) ] ->
      cache_ops:(('a, 'b) cache_state, 'c) Monad.mref ->
      (cached_map_ops:[> `Map_ops of
                           ('a -> ('b option, 'c) Monad.m) *
                           ('a -> 'b -> (unit, 'c) Monad.m) *
                           ('a -> (unit, 'c) Monad.m) *
                           ('a ->
                            'b ->
                            ('a * 'b) list -> (('a * 'b) list, 'c) Monad.m) ] ->
       evict_hook:(unit -> unit) ref -> 'd) ->
      'd
  end
