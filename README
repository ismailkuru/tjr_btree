-*- org -*-

~tjr_btree~, a CoW B-tree library

* Description

~tjr_btree~ is a B-tree library written in OCaml. The examples include
a simple on-disk key-value store.


* Examples

See ./examples e.g. ./examples/int_int_map_example_functionality.ml


* Introduction

The B-tree is a simple CoW B-tree. All sync-ed states are persistent
on disk (imagine that blocks are written once and then never mutated),
so operations such as "snapshot" are almost trivial.

The B-tree supports the usual operations: find, insert, delete.
In addition, there is an ~insert_many~ operation for inserting
multiple key-value pairs at once. This operation is more efficient
than repeatedly inserting. It is typically used when higher-level
operations are cached and then flushed all at once.

The routines are fully parameterized (e.g., by key and value type, key
order, store type etc). It is easy to have many B-trees using the same
store, even operating concurrently (although individual B-trees must
be updated sequentially at the moment).

The core is implemented in small-step operational style, with each
disk access corresponding to a separate step. Thus, it should be
feasible to introduce very fine-grained concurrency by interleaving
individual steps of each operation (where multiple operations execute
on different B-trees).

The core code is written in Isabelle/HOL and exported to OCaml
(although it could easily be implemented in any language because the
routines are very "concrete"). This repository contains the OCaml
wrapper round the core OCaml code extracted from Isabelle.


* Relation to ImpFS

ImpFS is a project to build an advanced high-performance filesystem.
~tjr_btree~ is one of the core libraries used by ImpFS.


* Installation

There is a Dockerfile that I use to build my filesystem-related
repositories here:

https://github.com/tomjridge/impfs_base_docker_image/blob/master/impfs_base_docker_image/Dockerfile

For the base system you need: 
- a basic Linux distribution (e.g. Ubuntu 16.04)
- supporting libraries (libfuse-dev for Ubuntu)
- ocaml and opam
- additional opam packages (e.g. ocamlfuse; details can be found in the
  Dockerfile above)

On top of this, you then need some additional support libraries that
may not be available in opam. You can find the details in
./.dockerfile/Dockerfile ; at the moment this includes the libraries
~tjr_lib~, ~isa_btree~, ~tjr_monad~ and ~tjr_fs_shared~. These are all
available from https://github.com/tomjridge

Then in this directory type ~make && make install~ to make the library
and install it using ~ocamlfind~. 


* Documentation

Please read the overview
https://tomjridge.github.io/tjr_btree/Tjr_btree_doc.html
and the ocamldoc
https://tomjridge.github.io/tjr_btree/

Please also see the recap of the main types in
=src/r_recap/recap_edited.mli= (there is a =.html= version in the same
directory for easy reference). This is a "high-level, formal" document
that gives the main types, but leaves out almost all operations. FIXME
this needs fixing


* Dependencies

opam:

| yojson ppx_deriving_yojson |                                                 |
| core                       | bin_prot; timestamping, for performance testing |
| ppx_bin_prot               | marshalling via bin_prot, for testing           |
| extlib                     | pmap FIXME replace with tjr_polymap             |


other:
| tjr_lib       | Basic library support                    |
| isa_btree     | Base OCaml defns extracted from Isabelle |
| tjr_monad     | Generic monad                            |
| tjr_fs_shared | Shared library for all fs stuff          |


old?:
| ocaml-compiler-libs |                |
| extunix             | provides fsync |
